/* =================================================================================
File name:      DRIVE_WORDS.H                   
                    
Originator:     Triol 

Description:    Содержатся слова управления и статуса библиотек ВУ и ИП

=====================================================================================
 History:
-------------------------------------------------------------------------------------
 12-01-2011 Version 1.00
 23-09-2020 Version 2.00 PAN
-----------------------------------------------------------------------------------*/

#ifndef __DRIVEWORDS_H__
#define __DRIVEWORDS_H__

////--------------------------------------------------////
////            Слово управления                      ////
////--------------------------------------------------////

// Определение битов слова управления
struct  CTRLWORD_BITS {     // bits  description
// биты управления библиотекой ВУ
    u64 SysCalc:         1;     // 0 - Запуск расчета параметров и коэффициентов ИП и ВУ
    u64 WrotCtrl:        1;     // 1 - Выбор режима управления по скорости или по моменту
    u64 vCodeEnb:        1;     // 2 - Вкл/Выкл исполняющий код ВУ
    u64 DriveEnb:        1;     // 3 - Пуск/Стоп привода
    u64 EMFRegEnb:       2;     // 4-5 - Включение регулятора ослабления поля
    u64 FiltrRefSpdEnb:  1;     // 6 - Включение фильтра задания скорости
    u64 ManualSpdReg:    1;     // 7 - Включение ручной настройки регулятора скорости
    u64 ForceEnb:        1;     // 8 - Включение усиления регулятора скорости
    u64 SoftCurDwn:      1;     // 9 - Плавный сброс тока
    u64 PMSMfreezeGT:    1;     // 10 - Останов ГТ в пусковом режиме PMSM
    u64 ManualCurReg:    1;     // 11 - Включение ручной настройки регулятора контура тока
    u64 Reserv1:         4;     // 12:15 - Резерв
    u64 Reserv2:         16;    // 16:31 - Резерв
// биты управления библиотекой ИП    
    //u64 PWMOn_In:        1;     // 32 - Подтверждение фактического вкл/выкл ШИМ
    u64 mWorkEnb:        1;     // 33 - Пуск/Стоп режима измерения параметров
    u64 FailOn:          1;     // 34 - Флаг аварии
    u64 Reserv3:         13;    // 35:47 - Резерв
};

// Определение байтов слова управления
struct  CTRLWORD_BYTES { // bits   description
    u64 byte0:   8;     // 0:7       
    u64 byte1:   8;     // 8:15                  
    u64 byte2:   8;     // 16:23                  
    u64 byte3:   8;     // 24:32                  
    u64 byte4:   8;     // 33:40                  
    u64 byte5:   8;     // 41:47                  
};

// Обеспечение доступа ко всему регистру или к его частям
union CTRLWORD_REG {
   u64                   all;
   struct CTRLWORD_BITS  bit;      
   struct CTRLWORD_BYTES byte;
};

////--------------------------------------------------////
////             Слово состояния                      ////
////--------------------------------------------------////

// Определение битов регистра статуса
struct  STATWORD_BITS {  // bits  description
// биты статуса библиотеки ВУ
    u16 vPrUP:       1;    // 0 - Поток нарос  
    u16 vEncoErr:    3;    // 1:3 - Ошибка абсолютного энкодера 
    u16 GeneratorMode:1;   // 4 - 1 - Идет работа в генераторном режиме, 0 - работаем в двигательном режиме.
    u16 FWsecondZoneOnState:1; // 5 - Флаг Перехода в ослабление поля
    u16 Reserv1:     10;   // 6:15  - Резерв
    u16 Reserv2:     16;   // 16:31 - Резерв
// биты статуса библиотеки ИП                           
    u16 mWorkFin:    1;    // 32 - Измерение завершено
    u16 PWMOn_Out:   1;    // 33 - Запрос на вкл/выкл ШИМ
    u16 mExpNum:     5;    // 34:38 - Номер текущего опыта измерения
    u16 Reserv3:     9;    // 39:47 - Резерв     
};

// Определение байтов регистра статуса
struct  STATWORD_BYTES {   // bits   description
    u16 byte0:   8;     // 0:7       
    u16 byte1:   8;     // 8:15                  
    u16 byte2:   8;     // 16:23                  
    u16 byte3:   8;     // 24:32                  
    u16 byte4:   8;     // 33:40                  
    u16 byte5:   8;     // 41:47        
};

// Обеспечение доступа ко всему регистру или к его частям
union STATWORD_REG {
    u16                    all;
    struct STATWORD_BYTES  byte;      
    struct STATWORD_BITS   bit;
};

////--------------------------------------------------////
////             Структура слов                       ////
////--------------------------------------------------////

typedef struct  {
   union CTRLWORD_REG   Ctrl;
   union STATWORD_REG   Stat;
   void   (*calc)();              // Pointer to calculation function
} DRIVEWORDS;

typedef DRIVEWORDS * DRVWORDS_handle;

/*-----------------------------------------------------------------------------
Default initalizer for the STATUS_OBSERVER object.
-----------------------------------------------------------------------------*/                     
#define DRVWORDS_DEFAULTS { 0, \
                            0, \
                           (void (*)(u32))status_calc }

/*------------------------------------------------------------------------------
Prototypes for the functions in STATUS_OBSERVER.C
------------------------------------------------------------------------------*/
void status_calc(DRVWORDS_handle, DRIVECONST_handle);

#endif

